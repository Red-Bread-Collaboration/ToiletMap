[
    {
        "label": "title",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "yandex_geocoder",
        "description": "yandex_geocoder",
        "isExtraImport": true,
        "detail": "yandex_geocoder",
        "documentation": {}
    },
    {
        "label": "NothingFound",
        "importPath": "yandex_geocoder.exceptions",
        "description": "yandex_geocoder.exceptions",
        "isExtraImport": true,
        "detail": "yandex_geocoder.exceptions",
        "documentation": {}
    },
    {
        "label": "YaMapsTools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "isExtraImport": true,
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "site = get('https://skr.su/news/18/2019-02-26/nuzhnyy-putevoditel-v-yuzhno-sahalinske-poyavilas-karta-obschestvennyh-tualetov-194550')\npage = bs(site.text, 'lxml')\npoints = page.select('div.Common_common__MfItd h3')\n# print(points)\ntitles = [re.sub(r'\\d+. ', '', str(point.text)) for point in points]\n# print(titles)\npoints = page.select('div.Common_common__MfItd p')\ncomments = []\nfor point in points:\n    if 'примечание' in point.text.lower():",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "page = bs(site.text, 'lxml')\npoints = page.select('div.Common_common__MfItd h3')\n# print(points)\ntitles = [re.sub(r'\\d+. ', '', str(point.text)) for point in points]\n# print(titles)\npoints = page.select('div.Common_common__MfItd p')\ncomments = []\nfor point in points:\n    if 'примечание' in point.text.lower():\n        comments.append(point.text.replace('\\xa0', ''))",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "points = page.select('div.Common_common__MfItd h3')\n# print(points)\ntitles = [re.sub(r'\\d+. ', '', str(point.text)) for point in points]\n# print(titles)\npoints = page.select('div.Common_common__MfItd p')\ncomments = []\nfor point in points:\n    if 'примечание' in point.text.lower():\n        comments.append(point.text.replace('\\xa0', ''))\n# print(comments)",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "titles",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "titles = [re.sub(r'\\d+. ', '', str(point.text)) for point in points]\n# print(titles)\npoints = page.select('div.Common_common__MfItd p')\ncomments = []\nfor point in points:\n    if 'примечание' in point.text.lower():\n        comments.append(point.text.replace('\\xa0', ''))\n# print(comments)\nclient = Client('ccbc665b-e2a1-4c7d-aff9-cd458b1317bb')\nfor i in range(1):",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "points = page.select('div.Common_common__MfItd p')\ncomments = []\nfor point in points:\n    if 'примечание' in point.text.lower():\n        comments.append(point.text.replace('\\xa0', ''))\n# print(comments)\nclient = Client('ccbc665b-e2a1-4c7d-aff9-cd458b1317bb')\nfor i in range(1):\n    print(titles[i])\n    print(comments[i])",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "comments",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "comments = []\nfor point in points:\n    if 'примечание' in point.text.lower():\n        comments.append(point.text.replace('\\xa0', ''))\n# print(comments)\nclient = Client('ccbc665b-e2a1-4c7d-aff9-cd458b1317bb')\nfor i in range(1):\n    print(titles[i])\n    print(comments[i])\n    # try:",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "PointsParser",
        "description": "PointsParser",
        "peekOfCode": "client = Client('ccbc665b-e2a1-4c7d-aff9-cd458b1317bb')\nfor i in range(1):\n    print(titles[i])\n    print(comments[i])\n    # try:\n    # print(titles[i])\n    coord_Y, coord_X = client.coordinates(f\"Южно-Сахалинск {titles[i]}\")\n    # coord_Y, coord_X = YaMapsTools.get_geo_coordinates(YaMapsTools.get_geo_toponym(f\"Южно-Сахалинск {titles[i]}\"))\n        # coord_Y, coord_X = client.coordinates(f\"Южно-Сахалинск Комсомолец\")\n    # except NothingFound:",
        "detail": "PointsParser",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "ToiletMap",
        "description": "ToiletMap",
        "peekOfCode": "a = get_map_response('11')\nprint(a)",
        "detail": "ToiletMap",
        "documentation": {}
    },
    {
        "label": "get_map_response",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang\n              }\n    response = requests.get(MAP_SERVER, params=params)\n    if not response:\n        print(\"Ошибка в запросе:\")\n        print(response.url.replace('%2C', ','))\n        print(\"Http статус:\", response.status_code, \"(\", response.reason, \")\")",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "write_map_as_file",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def write_map_as_file(map_response, filename):\n    try:\n        with open(filename, \"wb\") as file:\n            file.write(map_response.content)\n        return True\n    except Exception:\n        return False\n# Топонимы объектов\ndef get_geo_toponyms(code, apikey=GEO_KEY, kind=None, rspn=None, ll=None, spn=None, bbox=None,\n                     _format=\"json\", lang=\"ru_RU\", results=1, skip=None):",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_toponyms",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_toponyms(code, apikey=GEO_KEY, kind=None, rspn=None, ll=None, spn=None, bbox=None,\n                     _format=\"json\", lang=\"ru_RU\", results=1, skip=None):\n    try:\n        params = {\"apikey\": apikey, \"geocode\": code, \"kind\": kind, \"rspn\": rspn, \"ll\": ll,\n                  \"spn\": spn, \"bbox\": bbox, \"format\": _format, \"lang\": lang,\n                  \"results\": results, \"skip\": skip}\n        response = requests.get(GEO_SERVER, params=params)\n        if not response:\n            print(\"Ошибка в запросе:\")\n            print(response.url.replace('%2C', ','))",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_toponym",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_toponym(code, n=0, apikey=GEO_KEY, kind=None, rspn=None, ll=None, spn=None,\n                    bbox=None, _format=\"json\", lang=\"ru_RU\"):\n    try:\n        toponyms = get_geo_toponyms(code, apikey=apikey, kind=kind, rspn=rspn, ll=ll, spn=spn, bbox=bbox,\n                                    _format=_format, lang=lang, results=n + 1, skip=n)\n        return toponyms[n][\"GeoObject\"]\n    except Exception:\n        return None\n# Район объекта\ndef get_geo_district(coordinates):",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_district",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_district(coordinates):\n    geo_toponym = get_geo_toponym(coordinates, kind='district')\n    return geo_toponym['metaDataProperty']['GeocoderMetaData']['Address']['Components'][-1]['name']\n# Координаты объекта\ndef get_geo_coordinates(toponym):\n    lon, lat = map(float, toponym[\"Point\"][\"pos\"].split())\n    return lon, lat\n# Границы объекта\ndef get_geo_borders(toponym):\n    corners = toponym['boundedBy']['Envelope']",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_coordinates",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_coordinates(toponym):\n    lon, lat = map(float, toponym[\"Point\"][\"pos\"].split())\n    return lon, lat\n# Границы объекта\ndef get_geo_borders(toponym):\n    corners = toponym['boundedBy']['Envelope']\n    lon1, lat1 = map(float, corners['lowerCorner'].split())\n    lon2, lat2 = map(float, corners['upperCorner'].split())\n    return lon1, lon2, lat1, lat2\n# Размеры объекта",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_borders",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_borders(toponym):\n    corners = toponym['boundedBy']['Envelope']\n    lon1, lat1 = map(float, corners['lowerCorner'].split())\n    lon2, lat2 = map(float, corners['upperCorner'].split())\n    return lon1, lon2, lat1, lat2\n# Размеры объекта\ndef get_geo_size(toponym):\n    lon1, lon2, lat1, lat2 = get_geo_borders(toponym)\n    w = get_distance((lon1, lat1), (lon2, lat1)) / (111 * 1000)\n    h = get_distance((lon1, lat1), (lon1, lat2)) / (111 * 1000)",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_geo_size",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_geo_size(toponym):\n    lon1, lon2, lat1, lat2 = get_geo_borders(toponym)\n    w = get_distance((lon1, lat1), (lon2, lat1)) / (111 * 1000)\n    h = get_distance((lon1, lat1), (lon1, lat2)) / (111 * 1000)\n    return w, h\n# Топонимы организаций\ndef get_org_toponyms(code, apikey=ORG_KEY, lang='ru_RU', _type='biz', ll=None,\n                     spn=None, bbox=None, results=1, skip=None):\n    try:\n        params = {\"apikey\": apikey, \"text\": code, \"lang\": lang, \"type\": _type, \"ll\": ll,",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_toponyms",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_toponyms(code, apikey=ORG_KEY, lang='ru_RU', _type='biz', ll=None,\n                     spn=None, bbox=None, results=1, skip=None):\n    try:\n        params = {\"apikey\": apikey, \"text\": code, \"lang\": lang, \"type\": _type, \"ll\": ll,\n                  \"spn\": spn, \"bbox\": bbox, \"results\": results, \"skip\": skip}\n        response = requests.get(ORG_SERVER, params=params)\n        if not response:\n            print(\"Ошибка в запросе:\")\n            print(response.url.replace('%2C', ','))\n            print(\"Http статус:\", response.status_code, \"(\", response.reason, \")\")",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_toponym",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_toponym(code, n=0, apikey=ORG_KEY, lang='ru_RU', _type='biz', ll=None,\n                    spn=None, bbox=None):\n    try:\n        toponyms = get_org_toponyms(code, apikey=apikey, lang=lang, _type=_type, ll=ll,\n                                    spn=spn, bbox=bbox, results=n + 1, skip=n)\n        return toponyms[n]\n    except Exception:\n        return None\n# Координаты организации\ndef get_org_coordinates(toponym):",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_coordinates",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_coordinates(toponym):\n    lon, lat = toponym['geometry']['coordinates']\n    return lon, lat\n# Адрес организации\ndef get_org_address(toponym):\n    return toponym['properties']['CompanyMetaData']['address']\n# Название организации\ndef get_org_name(toponym):\n    return toponym['properties']['CompanyMetaData']['name']\n# Режим работы организации",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_address",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_address(toponym):\n    return toponym['properties']['CompanyMetaData']['address']\n# Название организации\ndef get_org_name(toponym):\n    return toponym['properties']['CompanyMetaData']['name']\n# Режим работы организации\ndef get_org_schedule(toponym):\n    try:\n        return toponym['properties']['CompanyMetaData']['Hours']['text']\n    except Exception:",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_name",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_name(toponym):\n    return toponym['properties']['CompanyMetaData']['name']\n# Режим работы организации\ndef get_org_schedule(toponym):\n    try:\n        return toponym['properties']['CompanyMetaData']['Hours']['text']\n    except Exception:\n        return None\n# Узнать, работает ли организация круглосуточно\ndef get_org_is_twenty_four_hours(toponym):",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_schedule",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_schedule(toponym):\n    try:\n        return toponym['properties']['CompanyMetaData']['Hours']['text']\n    except Exception:\n        return None\n# Узнать, работает ли организация круглосуточно\ndef get_org_is_twenty_four_hours(toponym):\n    try:\n        avals = toponym['properties']['CompanyMetaData']['Hours']['Availabilities'][0]\n        if 'TwentyFourHours' in avals.keys():",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_org_is_twenty_four_hours",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_org_is_twenty_four_hours(toponym):\n    try:\n        avals = toponym['properties']['CompanyMetaData']['Hours']['Availabilities'][0]\n        if 'TwentyFourHours' in avals.keys():\n            return avals['TwentyFourHours']\n        elif 'Intervals' in avals.keys():\n            return False\n    except Exception:\n        pass\n    return None",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "get_distance",
        "kind": 2,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "def get_distance(a, b):\n    degree_to_meters_factor = 111 * 1000\n    a_lon, a_lat = a\n    b_lon, b_lat = b\n    radians_lattitude = math.radians((a_lat + b_lat) / 2)\n    lat_lon_factor = math.cos(radians_lattitude)\n    dx = abs(a_lon - b_lon) * degree_to_meters_factor * lat_lon_factor\n    dy = abs(a_lat - b_lat) * degree_to_meters_factor\n    distance = math.sqrt(dx * dx + dy * dy)\n    return int(distance)",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "MAP_SERVER",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "MAP_SERVER = \"http://static-maps.yandex.ru/1.x/\"\nGEO_SERVER = \"http://geocode-maps.yandex.ru/1.x/\"\nORG_SERVER = \"https://search-maps.yandex.ru/v1/\"\nMAP_KEY = \"\"  # Ключ для коммерческой версии Static API, если нужен.\nGEO_KEY = \"ccbc665b-e2a1-4c7d-aff9-cd458b1317bb\"    # Ключ к API Геокодера. Обязателен.\nORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "GEO_SERVER",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "GEO_SERVER = \"http://geocode-maps.yandex.ru/1.x/\"\nORG_SERVER = \"https://search-maps.yandex.ru/v1/\"\nMAP_KEY = \"\"  # Ключ для коммерческой версии Static API, если нужен.\nGEO_KEY = \"ccbc665b-e2a1-4c7d-aff9-cd458b1317bb\"    # Ключ к API Геокодера. Обязателен.\nORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "ORG_SERVER",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "ORG_SERVER = \"https://search-maps.yandex.ru/v1/\"\nMAP_KEY = \"\"  # Ключ для коммерческой версии Static API, если нужен.\nGEO_KEY = \"ccbc665b-e2a1-4c7d-aff9-cd458b1317bb\"    # Ключ к API Геокодера. Обязателен.\nORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang\n              }",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "MAP_KEY",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "MAP_KEY = \"\"  # Ключ для коммерческой версии Static API, если нужен.\nGEO_KEY = \"ccbc665b-e2a1-4c7d-aff9-cd458b1317bb\"    # Ключ к API Геокодера. Обязателен.\nORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang\n              }\n    response = requests.get(MAP_SERVER, params=params)",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "GEO_KEY",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "GEO_KEY = \"ccbc665b-e2a1-4c7d-aff9-cd458b1317bb\"    # Ключ к API Геокодера. Обязателен.\nORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang\n              }\n    response = requests.get(MAP_SERVER, params=params)\n    if not response:",
        "detail": "YaMapsTools",
        "documentation": {}
    },
    {
        "label": "ORG_KEY",
        "kind": 5,
        "importPath": "YaMapsTools",
        "description": "YaMapsTools",
        "peekOfCode": "ORG_KEY = \"\"    # Ключ к API Поиска по организациям. Обязателен.\n# Карта\ndef get_map_response(ll, _l=\"map\", key=MAP_KEY, spn=None, z=None, size=None, scale=None,\n                     pt=None, pl=None, lang=\"ru_Ru\"):\n    params = {\"l\": _l, \"ll\": ll, \"key\": key, \"spn\": spn, \"z\": z, \"size\": size, \"scale\": scale,\n              \"pt\": pt, \"pl\": pl, \"lang\": lang\n              }\n    response = requests.get(MAP_SERVER, params=params)\n    if not response:\n        print(\"Ошибка в запросе:\")",
        "detail": "YaMapsTools",
        "documentation": {}
    }
]